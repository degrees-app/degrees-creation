import { useEffect, useRef } from "react";
import { useSelector } from "react-redux";
import { RootState } from "../../../app/store";

export const CanvasPhoneFrame = () => {
  const canvasRef = useRef<HTMLCanvasElement | null>(null);
  const { textStyle, degrees, number1, number2 } = useSelector((state: RootState) => state.backround);

  // üé® –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –Ω–∞ canvas
  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const ctx = canvas.getContext("2d");
    if (!ctx) return;

    // –û—á–∏—â–∞–µ–º canvas –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–æ–π
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // –†–∏—Å—É–µ–º —Ñ–æ–Ω (–∏–º–∏—Ç–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
    ctx.fillStyle = "black";
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    ctx.strokeStyle = "white";
    ctx.lineWidth = 10;
    ctx.strokeRect(0, 0, canvas.width, canvas.height);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –∏ —Ü–≤–µ—Ç –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    ctx.fillStyle = textStyle.color;
    ctx.font = `18px ${textStyle.fontFamily}`;

    // –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª (–≥—Ä–∞–¥—É—Å—ã)
    ctx.fillText(degrees, 20, 30);

    // –ú–∞–ª–µ–Ω—å–∫–∏–µ –∫—Ä—É–∂–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º textStyle.color)
    for (let i = 0; i < 3; i++) {
      ctx.beginPath();
      ctx.arc(30 + i * 10, 40, 3, 0, Math.PI * 2);
      ctx.fill();
    }

    // –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª (—á–∏—Å–ª–∞)
    ctx.fillText(`${number1}¬∞`, canvas.width - 50, 30);
    ctx.fillText(`${number2}¬∞`, canvas.width - 50, 50);

    // –ü–æ–ª—ã–π –∫—Ä—É–≥ –ø–æ —Ü–µ–Ω—Ç—Ä—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º textStyle.color)
    ctx.beginPath();
    ctx.arc(canvas.width / 2, canvas.height * 0.6, 25, 0, Math.PI * 2);
    ctx.strokeStyle = textStyle.color;
    ctx.lineWidth = 4;
    ctx.stroke();

    // –õ–∏–Ω–∏—è –ø–æ–¥ –∫—Ä—É–≥–æ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º textStyle.color)
    ctx.fillRect(canvas.width * 0.1, canvas.height * 0.75, canvas.width * 0.8, 2);
  }, [textStyle, degrees, number1, number2]); // –û–±–Ω–æ–≤–ª—è–µ–º canvas –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è

  // üíæ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ë–î
  const saveToDatabase = async () => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º canvas –≤ base64
    const imageBase64 = canvas.toDataURL("image/png");

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    try {
      const response = await fetch("http://localhost:5000/api/saveImage", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          image: imageBase64,
          fontFamily: textStyle.fontFamily,
          color: textStyle.color,
        }),
      });

      if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏");

      alert("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞:", error);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
    }
  };

  return (
    <div style={{ textAlign: "center" }}>
      {/* Canvas –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è */}
      <canvas ref={canvasRef} width={300} height={600} style={{ borderRadius: "40px", border: "2px solid white" }} />
      
      {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î */}
      <button onClick={saveToDatabase} style={{ marginTop: "10px", padding: "10px", cursor: "pointer" }}>
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
      </button>
    </div>
  );
};
