import { useEffect, useRef } from 'react';
import { useSelector } from 'react-redux';
import { RootState } from '../../../app/store';

export const CanvasPhoneFrame = () => {
  const canvasRef = useRef<HTMLCanvasElement | null>(null);
  const { textStyle, degrees, number1, number2 } = useSelector(
    (state: RootState) => state.interface
  );

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // –û—á–∏—â–∞–µ–º canvas –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–æ–π
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // –†–∏—Å—É–µ–º —Ñ–æ–Ω (–∏–º–∏—Ç–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
    ctx.fillStyle = 'black';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    ctx.strokeStyle = 'white';
    ctx.lineWidth = 10;
    ctx.strokeRect(0, 0, canvas.width, canvas.height);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –∏ —Ü–≤–µ—Ç –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    ctx.fillStyle = textStyle.color;
    ctx.font = `${textStyle.fontWeight} 18px ${textStyle.fontFamily}`;

    // –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª (–≥—Ä–∞–¥—É—Å—ã)
    ctx.fillText(degrees, 30, 50);

    // üî• –ü–æ–ª—ã–µ –∫—Ä—É–∂–∫–∏ (–ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å —á–∏—Å–ª–∞–º–∏ —Å–ø—Ä–∞–≤–∞)
    ctx.fillText(`¬∞`, canvas.width -270, 80);
    ctx.fillText(`¬∞`, canvas.width -260, 80);
    ctx.fillText(`¬∞`, canvas.width -250, 80);

    // –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª (—á–∏—Å–ª–∞)
    ctx.fillText(`${number1}¬∞`, canvas.width - 80, 50);
    ctx.fillText(`${number2}¬∞`, canvas.width - 55, 80);

    // –ü–æ–ª—ã–π –∫—Ä—É–≥ –ø–æ —Ü–µ–Ω—Ç—Ä—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º textStyle.color)
    ctx.beginPath();
    ctx.arc(canvas.width / 2, canvas.height * 0.5, 15, 0, Math.PI * 2);
    ctx.strokeStyle = textStyle.color;
    ctx.lineWidth = 6;
    ctx.stroke();

    // –õ–∏–Ω–∏—è –ø–æ–¥ –∫—Ä—É–≥–æ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º textStyle.color)
    ctx.fillRect(0, canvas.height * 0.65, canvas.width, 3);

    // üî• –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å (–ø–æ–¥–Ω—è—Ç–∞ –≤—ã—à–µ –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞)
    const panelY = canvas.height - 100; // –ü–æ–¥–Ω—è–ª–∏ –≤—ã—à–µ
    const panelX = canvas.width / 2 - 95; // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª—å

    ctx.lineWidth = 2; // üî• –°–¥–µ–ª–∞–ª –ª–∏–Ω–∏–∏ —Ç–æ–Ω—å—à–µ

    // üìå 1. –ü–æ–ª—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ (tocker)
    ctx.beginPath();
    ctx.moveTo(panelX -20, panelY - 20); // –í–µ—Ä—Ö–Ω—è—è —Ç–æ—á–∫–∞
    ctx.lineTo(panelX + 25, panelY + 10); // –ü—Ä–∞–≤–∞—è –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞
    ctx.lineTo(panelX - 20, panelY + 10); // –õ–µ–≤–∞—è –Ω–∏–∂–Ω—è—è —Ç–æ—á–∫–∞
    ctx.closePath();
    ctx.stroke();

    // –ü–æ–¥–ø–∏—Å—å "tocker" (–Ω–∏–∂–µ)
    ctx.fillText("tocker", panelX - 20, panelY + 30);

    // üìå 2. –°–ª–µ—à `/` (degree)
    ctx.beginPath();
    ctx.moveTo(panelX + 80, panelY + 10); // –ù–∞—á–∞–ª–æ —Å–ª–µ—à–∞
    ctx.lineTo(panelX + 110, panelY - 20); // –ö–æ–Ω–µ—Ü —Å–ª–µ—à–∞
    ctx.stroke();

    //–∫—Ä—É–∂–æ–∫ degree
    ctx.fillText(`O`, canvas.width -165, 495);

    // –ü–æ–¥–ø–∏—Å—å "degree" (–Ω–∏–∂–µ)
    ctx.fillText("degree", panelX + 65, panelY + 30);

    // üìå 3. –ü–æ–ª—ã–π –∫—Ä—É–∂–æ–∫, –ø–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç—ã–π —Å–ª–µ—à–∞–º–∏ (angles)
    ctx.beginPath();
    ctx.arc(panelX + 175, panelY, 12, 0, Math.PI * 2);
    ctx.stroke();

    ctx.beginPath();
    ctx.moveTo(panelX + 150, panelY - 10); // –ü–µ—Ä–≤—ã–π —Å–ª–µ—à
    ctx.lineTo(panelX + 200, panelY + 10);
    ctx.stroke();

    // –ü–æ–¥–ø–∏—Å—å "angles" (–Ω–∏–∂–µ)
    ctx.fillText("angles", panelX + 150, panelY + 30);
  }, [textStyle, degrees, number1, number2]); // –û–±–Ω–æ–≤–ª—è–µ–º canvas –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è

  return (
    <canvas ref={canvasRef} width={300} height={600} style={{ borderRadius: '40px', border: '2px solid white' }} />
  );
};
